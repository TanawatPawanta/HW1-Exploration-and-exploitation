import numpy as np

class Bandits:
    def __init__(self, N:int) -> None:
        self.rewardDistributions = np.random.rand(N)
        self.rewardChance = self.pickupRate()
        self.sum_reward_history = []
        
    def _get_reward(self, ind:int, result:float) -> bool:
        """
        This function reture reward by compare a result with reward's distribution if 
        result >= distribution, aget get the reward.

        Args:
            ind (int): choosed bandit
            result (float): vaule from random  for compare with distribution

        Returns:
            bool: True: get reward, False: don't get reward
        """
        if result >= self.rewardDistributions[ind]:
            return True
        else:
            return False
        
    def play_bandit(self, ind:int) -> int:
        """
        Recieve action from agent and return its reward.

        Args:
            ind (int): choosed bandit

        Returns:
            int: reward
        """
        result = np.random.rand()
        outcome = self._get_reward(ind=ind, result=result)
        return outcome
    
    def pickupRate(self)->list[float]:
        """
        Calculate chance to get reward

        Returns:
            list[float]: each bandit reward chance
        """
        rewardChance = []
        for i in self.rewardDistributions:
            rewardChance.append(1.0-i)
        return rewardChance
        
    def debug(self)->None:
        """
        Print a class' variables
        """
        print("Raward's distibution(reward = 0 when < distribution) : ", self.rewardDistributions)
        print("Raward's chance : ", self.rewardChance)
        
        

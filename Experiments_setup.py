from Agent import stupidAgent
from Bandit import Bandits
import numpy as np
import matplotlib.pyplot as plt
import numpy as np

def world(greedy_agent:stupidAgent, UCB_agent:stupidAgent, env:Bandits, stepLimit:int, do_debug:bool, do_plot:bool)->None:
    curr_step = 0
    while curr_step < stepLimit:
        curr_step += 1
        greedyAction = greedy_agent.action_selection(method="greedy")
        greedyReward = env.play_bandit(ind=greedyAction)
        greedy_agent.update(action=greedyAction, reward=greedyReward)
        
        UCBAction = UCB_agent.action_selection(method="UCB")
        UCBReward = env.play_bandit(ind=UCBAction)
        UCB_agent.update(action=UCBAction, reward=UCBReward)
        
    greedy_agent.calculate_ess(true_dis=env.rewardChance)
    UCB_agent.calculate_ess(true_dis=env.rewardChance)
    if do_debug:
        env.debug()
        greedy_agent.debug()
        UCB_agent.debug() 
    print("greedy_agent best action, Bandit number(start with 0) : ", greedy_agent.bestAction)
    print(greedy_agent.actionVaule)
    print("UCB_agent best action, Bandit number(start with 0)    : ", UCB_agent.bestAction)
    print(UCB_agent.actionVaule)
    if do_plot:
        greedy_agent.plot_actionCount()
        UCB_agent.plot_actionCount()
        greedy_agent.plot_history(name="action_value", true_dis=env.rewardChance)
        UCB_agent.plot_history(name="action_value", true_dis=env.rewardChance)
        greedy_agent.plot_history(name="reward",true_dis=None)
        UCB_agent.plot_history(name="reward", true_dis=None)

def plot_groupBar(inde_var:list, data:list, num_of_bandit:int, method:str, axisName:list[str])->None:    
    array_data = np.array(data)
    x = np.arange(len(inde_var))  # the label locations
    width = 0.15  # the width of the bars
    multiplier = 0
    x_label = []
    fig, ax = plt.subplots(layout='constrained')
        
    for i in range(len(inde_var)):
        attribute = "badit #"+str(i)
        x_label.append(str(inde_var[i]))
        offset = width * multiplier
        if i < num_of_bandit:
            rects = ax.bar(x + offset, array_data[:,i], width, label=attribute)
        ax.bar_label(rects, padding=3)
        multiplier += 1

    # Add some text for labels, title and custom x-axis tick labels, etc.
    ax.set_ylabel(axisName[0])
    ax.set_xlabel(axisName[1])
    ax.set_title(axisName[0]+" VS "+axisName[1]+"-"+method)
    ax.set_xticks(x + width, x_label)
    ax.legend(loc='upper left', ncols=3)
    plt.xticks(rotation=45)
    plt.show()